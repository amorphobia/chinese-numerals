use crate::{characters::*, Sign, ChineseNumeral, MidScaleInt};

/// Long scale integers (上数).
/// 
/// 上数者，数穷则变。若言万万曰亿，亿亿曰兆、兆兆曰京也。
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Default)]
pub struct LongScaleInt {
    pub(super) sign: Sign,
    pub(super) data: u128,
}

impl LongScaleInt {
    /// Generates a new long scale integer from given sign and absolute value.
    /// 
    /// The range of primitive `u128` is smaller than long scale can reach. This crate provides [`LongScaleBigInt`] for integers with absolute value larger than [`u128::MAX`].
    pub fn new(sign: Sign, data: u128) -> Self {
        if data == 0 {
            Self::default()
        } else {
            Self { sign, data }
        }
    }
}

impl ChineseNumeral for LongScaleInt {
    type Data = u128;

    fn sign(&self) -> Sign {
        self.sign
    }

    fn data(&self) -> &Self::Data {
        &self.data
    }

    fn to_chars(&self) -> Vec<NumChar> {
        let mut chars = Vec::new();
        let mut num = *self.data();
        let mut prev_rem = 1000_0000_0000_0000;

        // u128 uses up to NUM_CHARS[16] = Jing (京) for long scale numerals
        for exp in 14..=16 {
            let rem = num % 1_0000_0000_0000_0000;
            num /= 1_0000_0000_0000_0000;

            if rem > 0 {
                if !chars.is_empty() && prev_rem < 1000_0000_0000_0000 {
                    chars.push(NUM_CHARS[0]);
                }
                if exp > 14 {
                    chars.push(NUM_CHARS[exp]);
                }
                let mid = MidScaleInt::from(rem);
                let mut node = mid.to_chars();
                chars.append(&mut node);
            }
            prev_rem = rem;
        }
        chars
    }

    fn to_chars_trimmed(&self) -> Vec<NumChar> {
        let mut chars = self.to_chars();
        let mut data = *self.data();
        while data >= 1_0000 {
            data /= 1_0000;
        }
        if data >= 10 && data <= 19 {
            let one = chars.pop();
            debug_assert_eq!(one, Some(NumChar::One));
        }
        chars
    }
}

#[cfg(feature = "bigint")]
use num_bigint::BigUint;
#[cfg(feature = "bigint")]
use num_integer::Integer;
#[cfg(feature = "bigint")]
use num_traits::{ToPrimitive, Zero};

/// Long scale big integers (上数).
/// 
/// Use it by turning on feature "bigint". It uses [`BigUint`](num_bigint::BigUint) to store the absolute value. Therefore, all integers that can be expressed in long scale are included.
#[cfg(feature = "bigint")]
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Debug, Default)]
pub struct LongScaleBigInt {
    pub(super) sign: Sign,
    pub(super) data: BigUint,
}

#[cfg(feature = "bigint")]
impl LongScaleBigInt {
    pub(super) const MAX_ABS_ARR: &'static [u

    /// The maximum integer can be expressed in long scale.
    pub fn max_value() -> Self {
        Self {
            sign: Sign::Pos,
            data: BigUint::from_slice(Self::MAX_ABS_ARR),
        }
    }

    /// The minimum integer can be expressed in long scale.
    pub fn min_value() -> Self {
        Self {
            sign: Sign::Neg,
            data: BigUint::from_slice(Self::MAX_ABS_ARR),
        }
    }
}

#[cfg(feature = "bigint")]
impl ChineseNumeral for LongScaleBigInt {
    type Data = BigUint;

    fn sign(&self) -> Sign {
        self.sign
    }

    fn data(&self) -> &Self::Data {
        &self.data
    }

    fn to_chars(&self) -> Vec<NumChar> {
        let mut chars = Vec::new();
        let mut num = self.data().to_owned();
        // 1000_0000_0000_0000
        let mut prev_rem = BigUint::new(vec![2764472320, 232830]);
        let mut lim = BigUint::new(vec![2764472320, 232830]);
        // 1_0000_0000_0000_0000
        let mut div = BigUint::new(vec![1874919424, 2328306]);
        let ten = BigUint::new(vec![10]);

        for exp in 14..=23 {
            let (_, rem) = num.div_rem(&div);
            num /= &div;

            if rem > BigUint::zero() {
                if !chars.is_empty() && prev_rem < lim {
                    chars.push(NUM_CHARS[0]);
                }
                if exp > 14 {
                    chars.push(NUM_CHARS[exp]);
                }
                let mut node = if exp <= 15 {
                    let rem = rem.to_u64().unwrap();
                    let mid = MidScaleInt::from(rem);
                    mid.to_chars()
                } else {
                    let long = Self::try_from(&rem).unwrap();
                    long.to_chars()
                };
                chars.append(&mut node);
            }
            prev_rem = rem;
            if exp > 14 {
                prev_rem *= &div;
                div = &div * &div;
                lim = &div / &ten;
            }
        }
        chars
    }

    fn to_chars_trimmed(&self) -> Vec<NumChar> {
        let mut chars = self.to_chars();
        let mut data = self.data().to_owned();
        let div = BigUint::new(vec![1_0000]);
        let ten = BigUint::new(vec![10]);
        let nineteen = BigUint::new(vec![19]);
        while data >= div {
            data /= &div;
        }
        if data >= ten && data <= nineteen {
            let one = chars.pop();
            debug_assert_eq!(one, Some(NumChar::One));
        }
        chars
    }
}
